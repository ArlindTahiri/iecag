@inject NavigationManager Navigation

<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#notificationModal">
    Set Notification
</button>

<div class="modal fade" id="notificationModal" tabindex="-1" aria-labelledby="notificationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notificationModalLabel">Set Price Notification for @Name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="emailInput" class="form-label">Email</label>
                    <input type="email" class="form-control" id="emailInput" @bind="Email">
                </div>
                <div class="mb-3">
                    <label for="priceInput" class="form-label">Notification Price</label>
                    <input type="number" class="form-control" id="priceInput" @bind="NotificationPrice">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="SubmitNotification">Set Notification</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Name { get; set; }
    public double NotificationPrice { get; set; }
    public string Email { get; set; }

    private async Task SubmitNotification()
    {
        // Logik zum Speichern der Benachrichtigung
        // Zum Beispiel könnte hier ein SignalR-Aufruf oder ein HTTP-Aufruf zum Backend erfolgen
        Console.WriteLine($"Notification set for {Name} at price {NotificationPrice}");
        await CloseModalAsync("#notificationModal");
    }

    [Inject]
    IJSRuntime JSRuntime { get; set; }

    private async Task CloseModalAsync(string id)
    {
        await JSRuntime.InvokeVoidAsync("closeModal", id);
    }
}