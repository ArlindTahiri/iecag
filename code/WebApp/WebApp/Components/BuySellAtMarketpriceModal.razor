@rendermode InteractiveServer
@inject TransactionService transactionService

<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#ConvertCryptoModal">
    Buy/Sell
</button>

<div class="modal fade" id="ConvertCryptoModal" tabindex="-1" aria-labelledby="ConvertCryptoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="ConvertCryptoModalLabel">Convert Cryptocurrency</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm Model="@transaction" FormName="AddTransaction">
                <div class="modal-body">
                    <ul class="nav nav-pills nav-fill">
                        <li class="nav-item">
                            <button type="button" class="nav-link @(transactionType == "Buy" ? "active" : "")" @onclick='(() => selectTransactionType("Buy"))'>Buy</button>
                        </li>
                        <li class="nav-item">
                            <button type="button" class="nav-link @(transactionType == "Sell" ? "active" : "")" @onclick='(() => selectTransactionType("Sell"))'>Sell</button>
                        </li>
                    </ul>


                    @{
                        var currentPrice = coinPrices.FirstOrDefault(sp => sp.PartitionKey == transaction.SelectedCryptocurrency)?.price ?? 0.0;
                        exchangeRate = currentPrice == 0 ? 0 : Math.Round(1 / currentPrice, 7);
                    }

                    

                    <div class="p-3 border rounded mb-3 mt-4">
                        <div class="input-group mt-3">
                            <InputNumber type="text" @bind-Value="transaction.PricePaidAll" class="form-control" aria-label="Amount in EUR" placeholder="0.00" />
                            <span class="input-group-text">EUR</span>
                        </div>
                        <ValidationMessage For="() => transaction.PricePaidAll" />


                        <div class="text-center my-3">
                            <button type="button" class="btn btn-outline-secondary disabled">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-up" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M3.5 15a.5.5 0 0 0 .5-.5V1.707l2.646 2.647a.5.5 0 0 0 .708-.708l-3.5-3.5a.5.5 0 0 0-.708 0l-3.5 3.5a.5.5 0 0 0 .708.708L3 1.707V14.5a.5.5 0 0 0 .5.5zm9-14a.5.5 0 0 1 .5.5v12.793l2.646-2.647a.5.5 0 0 1 .708.708l-3.5 3.5a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 0 1 .708-.708L12 14.293V1.5a.5.5 0 0 1 .5-.5z" />
                                </svg>
                            </button>
                        </div>

                        <div class="input-group mt-3">
                            <InputNumber type="text" @bind-Value="transaction.Amount" class="form-control" aria-label="Amount in EUR" />
                            <InputSelect @bind-Value="transaction.SelectedCryptocurrency" class="form-select">
                                <option value="">Select a cryptocurrency</option>
                                @foreach (var crypto in cryptocurrencies)
                                {
                                    <option value="@crypto" @onselect="(() => SetSelectedCryptocurrency(crypto))">@crypto</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => transaction.SelectedCryptocurrency" />
                        </div>
                        <ValidationMessage For="() => transaction.Amount" />
                    </div>


                    <div class="mt-3 d-flex justify-content-between">
                        <label>Exchange Rate: </label>
                        <label>1 EUR = @exchangeRate @transaction.SelectedCryptocurrency</label>
                    </div>
                </div>


            </EditForm>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary @(string.IsNullOrWhiteSpace(transaction.SelectedCryptocurrency) ? "disabled" : "")" data-bs-target="#ConfirmConversionModal" data-bs-toggle="modal" @onclick="TransformTransaction">@transactionType</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ConfirmConversionModal" tabindex="-1" aria-labelledby="ConfirmConversionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="ConfirmConversionModalLabel">Confirm Conversion</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Amount in EUR: @transaction.PricePaidAll</p>
                <p>Amount in @transaction.SelectedCryptocurrency: @transaction.Amount</p>
                <p>Exchange Rate: 1 EUR = @exchangeRate @transaction.SelectedCryptocurrency</p>
                <p>You will receive: @transaction.Amount @transaction.SelectedCryptocurrency</p>
                <div class="mt-3 text-center">
                    <span class="text-danger">@errorMessage</span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary @(string.IsNullOrWhiteSpace(errorMessage) ? "" : "disabled")" @onclick="AddTransaction">Confirm Conversion</button>
            </div>
        </div>
    </div>
</div>



@code {
    private double exchangeRate = 0.0;

    [SupplyParameterFromForm]
    public TransactionModel transaction { get; set; } = new();

    [Parameter]
    public List<CoinPrice> coinPrices { get; set; } = new();

    [Parameter]
    public List<WalletEntry> walletEntries { get; set; } = new();

    [Parameter]
    public string selectedWallet { get; set; } = "";

    [Parameter]
    public string username { get; set; } = "";

    [Parameter]
    public List<string> cryptocurrencies { get; set; } = new();

    private string? errorMessage;

    private string transactionType = "Buy";


    private async Task AddTransaction()
    {

        transaction.TransactionDate = DateTime.Now;

        await transactionService.CreateTransactionAsync(username, transaction.SelectedCryptocurrency, transaction.Amount, transaction.PricePaidAll, DateTimeOffset.UtcNow, transactionType, selectedWallet);


        await TransactionAdded.InvokeAsync("#ConfirmConversionModal");

        errorMessage = "";
        transaction = new TransactionModel();
    }

    public void SetSelectedCryptocurrency(string crypto)
    {
        transaction.SelectedCryptocurrency = crypto;
    }

    private void TransformTransaction()
    {
        transaction.AveragePrice = coinPrices.Where(sp => sp.PartitionKey == transaction.SelectedCryptocurrency).Select(sp => sp.price).FirstOrDefault();
        transaction.TransactionDate = DateTime.Now;
        transaction.Amount = Math.Round(transaction.PricePaidAll / transaction.AveragePrice, 7);

        var walletEntry = walletEntries.FirstOrDefault(sp => sp.Name == transaction.SelectedCryptocurrency);
        if (walletEntry == null && transactionType == "Sell")
        {
            errorMessage = "You don't have any of this cryptocurrency to sell";
            return;
        }
        if (walletEntry != null && walletEntry.Amount < transaction.Amount && transactionType == "Sell")
        {
            errorMessage = "You don't have enough of this cryptocurrency to sell";
            return;
        }
        if (string.IsNullOrWhiteSpace(selectedWallet))
        {
            errorMessage = "Please select a wallet";
            return;
        }
    }

    [Parameter] public EventCallback<string> TransactionAdded { get; set; }

    private void selectTransactionType(string type)
    {
        transactionType = type;
    }

}
