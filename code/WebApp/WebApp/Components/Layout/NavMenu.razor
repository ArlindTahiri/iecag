
<nav class="navbar navbar-dark bg-dark fixed-top">
    <div class="container-fluid">
        <a class="navbar-brand" href="" @onclick='(() => SetActivePage("Home"))' style="display:flex; align-items: center; justify-content: center;">
            <img src="/favicon.png" alt="Logo" width="30" height="30" class="d-inline-block align-text-top" style="border-radius:100%">
            <span style="margin:0 10px;">IeCAG - Portfolio</span>
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasDarkNavbar" aria-controls="offcanvasDarkNavbar" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="offcanvas offcanvas-end text-bg-dark" tabindex="-1" id="offcanvasDarkNavbar" aria-labelledby="offcanvasDarkNavbarLabel">
            <div class="offcanvas-header">
                <h3 class="offcanvas-title" id="offcanvasDarkNavbarLabel">IeCAG</h3>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>

            <div class="offcanvas-body">
                <ul class="navbar-nav justify-content-end flex-grow-1 pe-3">
                    <li class="nav-item">
                        <a class="nav-link @(activePage == "Home" ? "active" : "")" href="" @onclick='(() => SetActivePage("Home"))'>Home</a>
                    </li>
                </ul>

                <hr>

                <ul class="navbar-nav align-items-end justify-content-end flex-grow-1 pe-3">
                    <li class="nav-item">
                        <a class="nav-link @(activePage == "Impressum" ? "active" : "")" href="Impressum" @onclick='(() => SetActivePage("Impressum"))'>Impressum</a>
                    </li>
                </ul>

            </div>
        </div>
    </div>
</nav>


@code {
    private string activePage; // Set the default active page

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override void OnInitialized()
    {
        activePage = GetLastSegment(NavigationManager.Uri);
    }

    private void SetActivePage(string page)
    {
        activePage = page;
    }

    private string GetLastSegment(string uri)
    {
        if (string.IsNullOrEmpty(uri))
        {
            return "Home";
        }

        var uriSegments = new Uri(uri).Segments;

        // If the last segment is "/" or empty, consider the second-to-last segment
        if (uriSegments.Length > 0 && (uriSegments[^1] == "/" || string.IsNullOrEmpty(uriSegments[^1])))
        {
            return uriSegments.Length > 1 ? uriSegments[^2] : "Home";
        }

        return uriSegments.Length > 0 ? uriSegments[^1] : "Home";
    }

}
