@page "/prices"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation;

<h1>Prices</h1>

@foreach (var priceEntry in priceEntries)
{
    <p>@priceEntry.Symbol: @priceEntry.Price</p>
}

@code {
    private List<PriceEntry> priceEntries = new List<PriceEntry>();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/priceshub"))
            .Build();

        hubConnection.On<string, decimal?>("ReceivePriceUpdate", (symbol, price) =>
        {
            var existingEntry = priceEntries.FirstOrDefault(entry => entry.Symbol == symbol);
            if (existingEntry != null)
            {
                existingEntry.Price = price; // Aktualisiere den Preis des vorhandenen Eintrags
            }
            else
            {
                priceEntries.Add(new PriceEntry { Symbol = symbol, Price = price }); // Füge einen neuen Eintrag hinzu, wenn das Symbol noch nicht vorhanden ist
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public class PriceEntry
    {
        public string Symbol { get; set; }
        public decimal? Price { get; set; }
    }
}