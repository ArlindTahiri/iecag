@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation;
@using WebApp.Components.SubComponents;
@implements IAsyncDisposable
@using Microsoft.Extensions.Options;
@inject IOptions<AzureTableStorageOptions> AzureTableStorageOptions;
@using Azure.Data.Tables;


<PageTitle>IeCAG - Cryptocurrencies</PageTitle>

<h1>Prices</h1>

<table class="table table-hover">
    <thead>
        <tr>
            <th>Name</th>
            <th>Price</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var priceEntry in priceEntries)
        {
            <tr @onclick="(() => RedirectToCryptocurrency(priceEntry.Name))" style="cursor: pointer;" title="Klicken, um Details von @priceEntry.Name anzuzeigen">
                <td>@priceEntry.Name</td>
                <td>@priceEntry.Price</td>
            </tr>
        }
    </tbody>
</table>

@code {
    PriceChart priceChart;

    private List<PriceEntry> priceEntries = new List<PriceEntry>();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        /*
        //Get all the prices from the Azure Table
        var options = AzureTableStorageOptions.Value;

        // Verbindung zu Azure Table Storage herstellen
        var serviceClient = new TableServiceClient(new Uri(options.TableEndpoint), new TableSharedKeyCredential(options.AccountName, options.AccountKey));
        var tableClient = serviceClient.GetTableClient("currentprice");

        // Lade alle Einträge aus der Tabelle
        await foreach (var entity in tableClient.QueryAsync<TableEntity>())
        {
            priceEntries.Add(new PriceEntry
                {
                    Name = entity.PartitionKey,
                    Price = Convert.ToDecimal(entity["Price"])
                });
        }
        */



        // Connect to the SignalR PriceHub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/priceshub"))
            .Build();

        hubConnection.On<string, decimal?>("ReceivePriceUpdate", async (name, price) =>
        {
            var existingEntry = priceEntries.FirstOrDefault(entry => entry.Name == name);
            if (existingEntry != null)
            {
                existingEntry.Price = price; // Aktualisiere den Preis des vorhandenen Eintrags
                if (name.Equals("Bitcoin"))
                {
                    //await priceChart.UpdateChart(DateTime.Now, (decimal)price);
                }
            }
            else
            {
                priceEntries.Add(new PriceEntry { Name = name, Price = price }); // Füge einen neuen Eintrag hinzu, wenn das Name noch nicht vorhanden ist
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


    private void RedirectToCryptocurrency(string name)
    {
        Navigation.NavigateTo($"cryptocurrencies/{name}");
    }
}