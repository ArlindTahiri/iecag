@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation;
@implements IAsyncDisposable
@using Microsoft.Extensions.Options;
@inject DataFetcherService dataFetcherService;
@inject TelemetryClient telemetryClient


<PageTitle>IeCAG - Cryptocurrencies</PageTitle>

<h1>Prices</h1>


<table class="table table-hover">
    <thead>
        <tr>
            <th>Name</th>
            <th>Price</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var priceEntry in priceEntries)
        {
            <tr @onclick="(() => RedirectToCryptocurrency(priceEntry.PartitionKey))" style="cursor: pointer;" title="Click, to see details of @priceEntry.PartitionKey">
                <td style="display: flex; align-items: center;">
                    <img src="@($"/images/{priceEntry.PartitionKey}.png")"
                         onerror="this.onerror=null;this.src='/images/default.png';"
                         alt="@priceEntry.PartitionKey"
                         style="height: 1.5em; width: auto; margin-right: 0.5em;" /> @priceEntry.PartitionKey
                </td>
                <td>@priceEntry.price</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<CoinPrice> priceEntries = new List<CoinPrice>();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        telemetryClient.TrackPageView("Home");
        await telemetryClient.FlushAsync(CancellationToken.None);

        priceEntries = await dataFetcherService.FetchAllCurrentPrices();
        

        // Connect to the SignalR PriceHub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/priceshub"))
            .Build();

        hubConnection.On<string, double>("ReceivePriceUpdate", async (name, price) =>
        {
            var existingEntry = priceEntries.FirstOrDefault(entry => entry.PartitionKey == name);
            if (existingEntry != null)
            {
                existingEntry.price = price; // Update the price of the existing entry
            }
            else
            {
                priceEntries.Add(new CoinPrice { PartitionKey = name, price = price }); // Add a new entry, if the name does not exist
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


    private void RedirectToCryptocurrency(string name)
    {
        Navigation.NavigateTo($"cryptocurrencies/{name}");
    }
}