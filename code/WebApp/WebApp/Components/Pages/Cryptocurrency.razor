@page "/cryptocurrencies/{Name}"
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation;
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject DataFetcherService dataFetcherService

<PageTitle>IeCAG - @Name</PageTitle>

<h1>@Name at @Price €</h1>

<PriceChart Name="@Name" pricesList="priceList" @ref="priceChart" />

@code {
    [Parameter] public string Name { get; set; }
    public double Price { get; set; }
    PriceChart priceChart;
    private HubConnection hubConnection;

    public List<KeyValuePair<DateTime, double>> priceList { get; set; } = new List<KeyValuePair<DateTime, double>>();


    protected override async Task OnInitializedAsync()
    {
        Price = await dataFetcherService.FetchCurrentPrice(Name);
        priceList = await dataFetcherService.FetchPriceOfLast7Days(Name);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/priceshub"))
        .Build();

        hubConnection.On<string, double>("ReceivePriceUpdate", async (name, price) =>
            {
                if (name == Name)
                {
                    await priceChart.UpdateChart(DateTime.Now, price);
                    Price = price;
                    InvokeAsync(StateHasChanged);
                }
            });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


}
