@page "/cryptocurrencies/{Name}"
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation;
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject DataFetcherService dataFetcherService
@inject TelemetryClient telemetryClient

<PageTitle>IeCAG - @Name</PageTitle>

<h1>
    <img src="@($"/images/{Name}.png")"
         onerror="this.onerror=null;this.src='/images/default.png';"
         alt="@Name"
         style="width: auto; height: 1.5em" /> @Name at @Price €
</h1>

<PriceChart Name="@Name" @ref="priceChart" TimeRangeChanged="OnTimeRangeChanged" _timeRangeInDays="lastSelectedDays"/>
<NotificationModal Name="@Name" CurrentPrice="@Price"/>

@code {
    [Parameter] public string Name { get; set; }
    public double Price { get; set; }
    PriceChart priceChart;
    private HubConnection hubConnection;
    public int lastSelectedDays = 7;

    public List<KeyValuePair<DateTime, double>> priceList { get; set; } = new List<KeyValuePair<DateTime, double>>();

    protected override async Task OnInitializedAsync()
    {
        telemetryClient.TrackPageView("Cryptocurrency - "+@Name);
        await telemetryClient.FlushAsync(CancellationToken.None);

        Price = await dataFetcherService.FetchCurrentPrice(Name);
        priceList = await dataFetcherService.FetchPriceOfLastXDays(Name,lastSelectedDays);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/priceshub"))
        .Build();

        hubConnection.On<string, double>("ReceivePriceUpdate", async (name, price) =>
            {
                if (name == Name)
                {
                    await priceChart.UpdateChart(DateTimeOffset.Now.LocalDateTime, price);
                    Price = price;
                    InvokeAsync(StateHasChanged);
                }
            });

        await hubConnection.StartAsync();

        await priceChart.UpdateChart(priceList);
        StateHasChanged();
    }

    private async Task OnTimeRangeChanged(int days)
    {
        lastSelectedDays = days;
        priceList = await dataFetcherService.FetchPriceOfLastXDays(Name, days);
        await priceChart.UpdateChart(priceList);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
