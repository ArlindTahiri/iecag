@page "/login"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using WebApp.Models.ViewModels
@inject UserService UserService
@inject NavigationManager navigationManager
@inject TelemetryClient telemetryClient

<PageTitle>IeCAG - Login</PageTitle>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border" style="border-radius:25px">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <h3><b>LOGIN</b></h3>
            </div>
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.UserName" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary" style="border-radius:20px">Login</button>
            </div>
            <div class="text-center">
                <p>Don't have an account? <a href="/register">Create Account</a></p>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext{ get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        telemetryClient.TrackPageView("Login");
        await telemetryClient.FlushAsync(CancellationToken.None);
    }

    private async Task Authenticate()
    {
        var userExists = await UserService.ValidateUserAsync(Model.UserName, Model.Password);
        if (!userExists)
        {
            errorMessage = "Invalid User Name or Password";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.UserName),
            new Claim(ClaimTypes.Role, "User")
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        
        // Check if ReturnUrl is present
        if (!string.IsNullOrEmpty(HttpContext.Request.Query["ReturnUrl"]))
        {
            // If ReturnUrl is present, redirect to that URL
            var returnUrl = HttpContext.Request.Query["ReturnUrl"];
            navigationManager.NavigateTo(returnUrl);
        }
        else
        {
            // If ReturnUrl is not present, redirect to default page
            navigationManager.NavigateTo("/");
        }
    }
}
