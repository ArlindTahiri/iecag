@page "/register"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using WebApp.Models.ViewModels
@inject UserService UserService
@inject NavigationManager navigationManager

<PageTitle>IeCAG - Registration</PageTitle>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border" style="border-radius:25px">
        <EditForm Model="@Model" OnValidSubmit="RegisterUser" FormName="RegisterForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <h3><b>REGISTER</b></h3>
            </div>
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.UserName" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3">
                <label>Confirm Password</label>
                <InputText @bind-Value="Model.ConfirmPassword" placeholder="Confirm Password" type="password" class="form-control" />
                <ValidationMessage For="() => Model.ConfirmPassword" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary" style="border-radius:20px">Register</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public RegisterViewModel Model { get; set; } = new();

    private string? errorMessage;

    private bool success;

    private async Task RegisterUser()
    {
        if (Model.Password != Model.ConfirmPassword)
        {
            errorMessage = "Passwords do not match";
            return;
        }

        try
        {
            // Check if the username already exists
            bool userExists = await UserService.UserExistsAsync(Model.UserName);
            if (userExists)
            {
                errorMessage = "Username already taken";
                return;
            }

            // Create user
            await UserService.CreateUserAsync(Model.UserName, Model.Password);
            success = true;
        }
        catch (Exception ex)
        {
            // Exception-Handling
            errorMessage = $"Registration failed: {ex.Message}";
        }
        if (success)
        {
            navigationManager.NavigateTo("login");
        }
        
    }
}
