@page "/wallet"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Administrator,user")]
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject HttpContext HttpContext;
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation;
@using WebApp.Components.SubComponents;
@implements IAsyncDisposable
@using Microsoft.Extensions.Options;
@inject IOptions<AzureTableStorageOptions> AzureTableStorageOptions;
@using Azure.Data.Tables;

<h3>Wallet</h3>

<PriceChart Symbol="Portfolio" pricesList="priceList" @ref="priceChart"/>

<table class="table">
    <thead>
        <tr>
            <th>Cryptocurrency Name</th>
            <th>Derzeitiger Price</th>
            <th>Durchschnittkaufpreis</th>
            <th>% value Change</th>
            <th>Anzahl von Cryptocurrency</th>
            <th>Gesamter Wert</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var walletEntry in walletEntries)
        {
            var averagePrice = walletEntry.Price;
            var priceChange = walletEntry.CurrentPrice.HasValue && averagePrice.HasValue
            ? Math.Round(((walletEntry.CurrentPrice.Value - averagePrice.Value) / averagePrice.Value) * 100, 2)
            : (decimal?)null;
            <tr @onclick="(() => RedirectToCryptocurrency(walletEntry.Symbol))" style="cursor: pointer;" title="Klicken, um Details von @walletEntry.Symbol anzuzeigen">
                <td>@walletEntry.Name @walletEntry.Symbol</td>
                <td>@walletEntry.CurrentPrice</td>
                <td>@averagePrice</td>
                <td>@priceChange %</td>
                <td>@walletEntry.Amount</td>
                <td>@(walletEntry.Amount * walletEntry.CurrentPrice)</td>
            </tr>
        }
    </tbody>
</table>

@code {
    PriceChart priceChart;

    public List<KeyValuePair<DateTime, decimal>> priceList { get; set; } = new List<KeyValuePair<DateTime, decimal>>
    {
        new KeyValuePair<DateTime, decimal>(DateTime.Now.AddMinutes(-30), 48000),
        new KeyValuePair<DateTime, decimal>(DateTime.Now.AddMinutes(-25), 48500),
        new KeyValuePair<DateTime, decimal>(DateTime.Now.AddMinutes(-20), 49000),
        new KeyValuePair<DateTime, decimal>(DateTime.Now.AddMinutes(-15), 49500),
        new KeyValuePair<DateTime, decimal>(DateTime.Now.AddMinutes(-10), 50000),
        new KeyValuePair<DateTime, decimal>(DateTime.Now.AddMinutes(-5), 50500),
        new KeyValuePair<DateTime, decimal>(DateTime.Now, 51000),
    };

    private List<WalletEntry> walletEntries = new List<WalletEntry>
    {
        new WalletEntry { Name = "Bitcoin", Symbol = "BTC", Amount = 0.5m, Price = 45000m, CurrentPrice = 48000m },
        new WalletEntry { Name = "Ethereum", Symbol = "ETH", Amount = 2m, Price = 3000m, CurrentPrice = 3200m },
        new WalletEntry { Name = "Crypto.com Coin", Symbol = "CRO", Amount = 1000m, Price = 0.2m, CurrentPrice = 0.25m }
    };


    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        //Get all the transactions from the Azure Table
        var options = AzureTableStorageOptions.Value;

        var serviceClient = new TableServiceClient(new Uri(options.TableEndpoint), new TableSharedKeyCredential(options.AccountName, options.AccountKey));
        var tableClient = serviceClient.GetTableClient("Transactions");

        var identity = (ClaimsIdentity)HttpContext.User.Identity;
        var userNameClaim = identity.FindFirst(ClaimTypes.Name);
        var userName = userNameClaim?.Value;
        

        // Abfrage zum Abrufen der Transaktionen des Benutzers
        var userTransactionsQuery = tableClient.QueryAsync<TableEntity>(
            filter: $"userid eq '{userName}'",
            select: new[] { "cryptocurrency", "pricePaidAll", "amount" }
        );

        var queryResults = new List<TableEntity>();

        await foreach (var entity in userTransactionsQuery)
        {
            queryResults.Add(entity);
        }

        // Durch die Benutzertransaktionen iterieren und nach Kryptowährungen gruppieren
        walletEntries = queryResults
        .GroupBy(
            t => t["cryptocurrency"].ToString(),
            (key, transactions) => new WalletEntry
                {
                    Symbol = key,
                    Amount = transactions.Sum(t => (decimal)t["amount"]),
                    Price = transactions.Sum(t => (decimal)t["pricePaidAll"]) / transactions.Sum(t => (decimal)t["amount"])
                })
        .ToList();


        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/priceshub"))
            .Build();

        hubConnection.On<string, decimal?>("ReceivePriceUpdate", async (symbol, price) =>
        {
            var existingEntry = walletEntries.FirstOrDefault(entry => entry.Symbol == symbol);
            if (existingEntry != null)
            {
                existingEntry.CurrentPrice = price; // Aktualisiere den Preis des vorhandenen Eintrags
                decimal allValue = walletEntries.Sum(entry => entry.Amount.GetValueOrDefault() * entry.CurrentPrice.GetValueOrDefault());
                await priceChart.UpdateChart(DateTime.Now, allValue);
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


    private void RedirectToCryptocurrency(string symbol)
    {
        Navigation.NavigateTo($"cryptocurrencies/{symbol}");
    }

}
