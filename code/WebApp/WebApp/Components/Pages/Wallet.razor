@page "/wallet"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Administrator, User")]
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation;
@using WebApp.Components.SubComponents;
@implements IAsyncDisposable
@using Microsoft.Extensions.Options;
@inject TransactionService transactionService;
@inject DataFetcherService dataFetcherService;
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>IeCAG - Wallet</PageTitle>

<h3>Wallet</h3>

<PriceChart Name="Portfolio" pricesList="priceList" @ref="priceChart" />

<hr />
<br />
<!-- Button trigger modal -->
<div class="d-flex justify-content-end">
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#transactionModal">
        Add Transaction
    </button>
</div>

<!-- Modal -->
<div class="modal fade" id="transactionModal" tabindex="-1" aria-labelledby="transactionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="transactionModalLabel">Add Transaction</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-pills nav-fill">
                    <li class="nav-item">
                        <button class="nav-link @(transactionType == "Buy" ? "active" : "")" aria-current="page" @onclick="(() => selectTransactionType(buyString))">Buy</button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link @(transactionType == "Sell" ? "active" : "")" @onclick="(() => selectTransactionType(sellString))">Sell</button>
                    </li>
                </ul>
                <div class="form-group mt-4">
                    <label for="selectCryptocurrency">Select Cryptocurrency</label>
                    <select class="form-select mt-1" @bind="selectedCryptocurrency">
                        <option value="" disabled selected>Select a cryptocurrency</option>
                        @foreach (var crypto in cryptocurrencies)
                        {
                            <option value="@crypto">@crypto</option>
                        }
                    </select>
                </div>
                <div class="form-group mt-3">
                    <label for="amount">Amount</label>
                    <input type="number" class="form-control mt-1" id="amount" @bind="amount" oninput="calculatePricePaidAllOrAveragePrice()">
                </div>
                <div class="form-group mt-3 row">
                    <div class="col">
                        <label for="averagePrice">Average Price</label>
                        <input type="number" class="form-control mt-1" id="averagePrice" @bind="averagePrice" oninput="calculatePricePaidAll()">
                    </div>
                    <div class="col">
                        <label for="pricePaidAll">Price Paid All</label>
                        <input type="number" class="form-control mt-1" id="pricePaidAll" @bind="pricePaidAll" oninput="calculateAveragePrice()">
                    </div>
                </div>
                <div class="form-group mt-3">
                    <label for="transactionDate">Transaction Date</label>
                    <input type="datetime-local" class="form-control mt-1" id="transactionDate" @bind="transactionDate">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="AddTransaction">Save changes</button>
            </div>
        </div>
    </div>
</div>

<script>
    var lastInputField;

    function calculatePricePaidAllOrAveragePrice() {
        if (lastInputField == "pricePaidAll") {
            
            var averagePrice = parseFloat(document.getElementById("averagePrice").value);
            var amount = parseFloat(document.getElementById("amount").value);
            if (!isNaN(averagePrice) && !isNaN(amount)) {
                var pricePaidAll = averagePrice * amount;
                document.getElementById("pricePaidAll").value = pricePaidAll.toFixed(2);
            }
        }
        else {
            var pricePaidAll = parseFloat(document.getElementById("pricePaidAll").value);
            var amount = parseFloat(document.getElementById("amount").value);
            if (!isNaN(pricePaidAll) && !isNaN(amount)) {
                var averagePrice = pricePaidAll / amount;
                document.getElementById("averagePrice").value = averagePrice.toFixed(2);
            }
        }
    }

    function calculatePricePaidAll() {
        lastInputField = "pricePaidAll";
        var averagePrice = parseFloat(document.getElementById("averagePrice").value);
        var amount = parseFloat(document.getElementById("amount").value);
        if (!isNaN(averagePrice) && !isNaN(amount)) {
            var pricePaidAll = averagePrice * amount;
            document.getElementById("pricePaidAll").value = pricePaidAll.toFixed(2);
        }
        
    }

    function calculateAveragePrice() {
        lastInputField = "averagePrice";
        var pricePaidAll = parseFloat(document.getElementById("pricePaidAll").value);
        var amount = parseFloat(document.getElementById("amount").value);
        if (!isNaN(pricePaidAll) && !isNaN(amount)) {
            var averagePrice = pricePaidAll / amount;
            document.getElementById("averagePrice").value = averagePrice.toFixed(2);
        }
    }
</script>

<table class="table">
    <thead>
        <tr>
            <th>Cryptocurrency</th>
            <th>Derzeitiger Price</th>
            <th>Durchschnittkaufpreis</th>
            <th>% value Change</th>
            <th>Anzahl von Cryptocurrency</th>
            <th>Gesamter Wert</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var walletEntry in walletEntries)
        {
            var averagePrice = walletEntry.AveragePrice;
            var priceChange = walletEntry.CurrentPrice.HasValue && averagePrice.HasValue
            ? Math.Round(((walletEntry.CurrentPrice.Value - averagePrice.Value) / averagePrice.Value) * 100, 2)
            : (double?)null;
            <tr @onclick="(() => RedirectToCryptocurrency(walletEntry.Name))" style="cursor: pointer;" title="Klicken, um Details von @walletEntry.Name anzuzeigen">
                <td>@walletEntry.Name</td>
                <td>@walletEntry.CurrentPrice</td>
                <td>@averagePrice</td>
                <td>@priceChange %</td>
                <td>@walletEntry.Amount</td>
                <td>@(walletEntry.Amount * walletEntry.CurrentPrice)</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private string buyString = "Buy";
    private string sellString = "Sell";
    PriceChart priceChart;

    private string selectedCryptocurrency;
    private decimal amount;
    private decimal? averagePrice;
    private decimal? pricePaidAll;
    private string transactionType = "Buy";
    private DateTime transactionDate = DateTime.Now;

    private void selectTransactionType(string type)
    {
        transactionType = type;
    }

    private List<string> cryptocurrencies = new List<string> { "Bitcoin", "Ethereum", "Cronos" }; // Beispielhafte Liste


    public List<KeyValuePair<DateTime, double>> priceList { get; set; } = new List<KeyValuePair<DateTime, double>>
    {
        new KeyValuePair<DateTime, double>(DateTime.Now.AddMinutes(-30), 34200),
        new KeyValuePair<DateTime, double>(DateTime.Now.AddMinutes(-25), 34800),
        new KeyValuePair<DateTime, double>(DateTime.Now.AddMinutes(-20), 37400),
        new KeyValuePair<DateTime, double>(DateTime.Now.AddMinutes(-15), 36000),
        new KeyValuePair<DateTime, double>(DateTime.Now.AddMinutes(-10), 36600),
        new KeyValuePair<DateTime, double>(DateTime.Now.AddMinutes(-5), 37200),
        new KeyValuePair<DateTime, double>(DateTime.Now, 37000),
    };

    private List<WalletEntry> walletEntries = new List<WalletEntry>
    {
        new WalletEntry { Name = "Bitcoin", Amount = 0.5, AveragePrice = 45000, CurrentPrice = 48000 },
        new WalletEntry { Name = "Ethereum", Amount = 2, AveragePrice = 3000, CurrentPrice = 3200 },
        new WalletEntry { Name = "Cronos", Amount = 1000, AveragePrice = 0.2, CurrentPrice = 0.25 }
    };


    private HubConnection? hubConnection;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userName = user.Identity?.Name;
        

        List<Transaction> allTransactionsOfUser = await transactionService.FetchAllTransactionsOfPerson(userName);

        // Erstelle Empty WalletEntries nur mit dem Namen
        walletEntries = allTransactionsOfUser.Select(transaction => new WalletEntry { Name = transaction.coin }).Distinct().ToList();


        // Berechne den durchschnittlichen Kaufpreis und die Anzahl der Cryptocurrency für jede WalletEntry
        foreach (var walletEntry in walletEntries)
        {
            var AlltransactionsOfCurrency = allTransactionsOfUser
                .Where(transaction => transaction.coin == walletEntry.Name)
                .OrderBy(t => t.TransactionDate)
                .ToList();

            walletEntry.Amount = AlltransactionsOfCurrency.Sum(transaction => transaction.TransactionType == "Buy" ? transaction.amount : -transaction.amount);

            // Setze nur den durchschnittlichen Kaufpreis, wenn der Benutzer die Cryptocurrency besitzt
            if (walletEntry.Amount > 0)
            {
                // Setze den durchschnittlichen Kaufpreis
                walletEntry.AveragePrice = HelperClasses.FinanceCalculations.CalculateAveragePrice(AlltransactionsOfCurrency);
            }
        }

        foreach (var walletEntry in walletEntries)
        {
            List<KeyValuePair<DateTime,double>> historicalPricesOfCryptoCurrency = await dataFetcherService.FetchPriceOfLast180Days(walletEntry.Name);
        
            historicalPricesOfCryptoCurrency = historicalPricesOfCryptoCurrency.OrderBy(h => h.Key).ToList();

            historicalPricesOfCryptoCurrency = HelperClasses.FinanceCalculations.CalculatePortfolioValueForTheLastXDays(historicalPricesOfCryptoCurrency, walletEntry.Name, allTransactionsOfUser, 180);

            // now add values to priceList
            if (priceList.Count == 0)
            {
                priceList = historicalPricesOfCryptoCurrency;
            }
            else
            {
                for (int j = 0; j < priceList.Count; j++)
                {
                    priceList[j] = new KeyValuePair<DateTime, double>(priceList[j].Key, priceList[j].Value + historicalPricesOfCryptoCurrency[j].Value);
                }
            }
        }



        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/priceshub"))
            .Build();

        hubConnection.On<string, double?>("ReceivePriceUpdate", async (name, price) =>
        {
            var existingEntry = walletEntries.FirstOrDefault(entry => entry.Name == name);
            if (existingEntry != null)
            {
                existingEntry.CurrentPrice = price; // Aktualisiere den Preis des vorhandenen Eintrags
                double allValue = walletEntries.Sum(entry => entry.Amount.GetValueOrDefault() * entry.CurrentPrice.GetValueOrDefault());
                await priceChart.UpdateChart(DateTime.Now, allValue);
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


    private void RedirectToCryptocurrency(string name)
    {
        Navigation.NavigateTo($"cryptocurrencies/{name}");
    }

    private async Task AddTransaction()
    {
        

    }

}
