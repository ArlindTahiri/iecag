@page "/wallet"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Administrator, User")]
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation;
@using WebApp.Components.SubComponents;
@implements IAsyncDisposable
@using Microsoft.Extensions.Options;
@inject TransactionService transactionService;
@inject DataFetcherService dataFetcherService;
@inject AuthenticationStateProvider AuthenticationStateProvider
@using WebApp.Models.ViewModels;


<PageTitle>IeCAG - Wallet</PageTitle>

<h3>Wallet</h3>

<PriceChart Name="Portfolio" pricesList="priceList" @ref="priceChart" />

<hr />
<br />
<!-- Button trigger modal -->
<div class="d-flex justify-content-end">
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#transactionModal">
        Add Transaction
    </button>
</div>

<!-- Modal -->
<div class="modal fade" id="transactionModal" tabindex="-1" aria-labelledby="transactionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="transactionModalLabel">Add Transaction</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm Model="@transaction" OnValidSubmit="AddTransaction" FormName="AddTransaction">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <ul class="nav nav-pills nav-fill">
                        <li class="nav-item">
                            <button class="nav-link @(transactionType == "Buy" ? "active" : "")" aria-current="page" @onclick='(() => selectTransactionType("Buy"))'>Buy</button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link @(transactionType == "Sell" ? "active" : "")" @onclick='(() => selectTransactionType("Sell"))'>Sell</button>
                        </li>
                    </ul>
                
                    
                    
                    <div class="mt-4">
                        <label>Select Cryptocurrency</label>
                        <InputSelect @bind-Value="transaction.SelectedCryptocurrency" class="form-select mt-1" id="selectCryptocurrency">
                            <option value="" disabled selected>Select a cryptocurrency</option>
                            @foreach (var crypto in cryptocurrencies)
                            {
                                <option value="@crypto">@crypto</option>
                            }
                        </InputSelect>
                    </div>
                    
                    <div class="mt-3">
                        <label>Amount</label>
                        <InputNumber @bind-Value="transaction.Amount" class="form-control mt-1" id="amount" oninput="calculatePricePaidAllOrAveragePrice()" />
                    </div>

                    <div class="mt-3 row">
                        <div class="col">
                            <label>Average Price</label>
                            <InputNumber @bind-Value="transaction.AveragePrice" class="form-control mt-1" id="averagePrice" oninput="calculatePricePaidAll()" />
                        </div>

                        <div class="col">
                            <label>Price Paid All</label>
                            <InputNumber @bind-Value="transaction.PricePaidAll" class="form-control mt-1" id="pricePaidAll" oninput="calculateAveragePrice()" />
                        </div>
                    </div>

                    <div class="mt-3">
                        <label>Transaction Date</label>
                        <InputDate @bind-Value="transaction.TransactionDate" class="form-control mt-1" id="transactionDate" />
                    </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Save changes</button>
            </div>
            </EditForm>
        </div>
    </div>
</div>

<script>
    var lastInputField;

    function calculatePricePaidAllOrAveragePrice() {
        if (lastInputField == "pricePaidAll") {
            
            var averagePrice = parseFloat(document.getElementById("averagePrice").value);
            var amount = parseFloat(document.getElementById("amount").value);
            if (!isNaN(averagePrice) && !isNaN(amount)) {
                var pricePaidAll = averagePrice * amount;
                document.getElementById("pricePaidAll").value = pricePaidAll.toFixed(2);
            }
        }
        else {
            var pricePaidAll = parseFloat(document.getElementById("pricePaidAll").value);
            var amount = parseFloat(document.getElementById("amount").value);
            if (!isNaN(pricePaidAll) && !isNaN(amount)) {
                var averagePrice = pricePaidAll / amount;
                document.getElementById("averagePrice").value = averagePrice.toFixed(2);
            }
        }
    }

    function calculatePricePaidAll() {
        lastInputField = "pricePaidAll";
        var averagePrice = parseFloat(document.getElementById("averagePrice").value);
        var amount = parseFloat(document.getElementById("amount").value);
        if (!isNaN(averagePrice) && !isNaN(amount)) {
            var pricePaidAll = averagePrice * amount;
            document.getElementById("pricePaidAll").value = pricePaidAll.toFixed(2);
        }
        
    }

    function calculateAveragePrice() {
        lastInputField = "averagePrice";
        var pricePaidAll = parseFloat(document.getElementById("pricePaidAll").value);
        var amount = parseFloat(document.getElementById("amount").value);
        if (!isNaN(pricePaidAll) && !isNaN(amount)) {
            var averagePrice = pricePaidAll / amount;
            document.getElementById("averagePrice").value = averagePrice.toFixed(2);
        }
    }
</script>

<table class="table">
    <thead>
        <tr>
            <th>Cryptocurrency</th>
            <th>Derzeitiger Price</th>
            <th>Durchschnittkaufpreis</th>
            <th>% value Change</th>
            <th>Anzahl von Cryptocurrency</th>
            <th>Gesamter Wert</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var walletEntry in walletEntries)
        {
            var averagePrice = walletEntry.AveragePrice;
            var priceChange = Math.Round(((walletEntry.CurrentPrice - averagePrice) / averagePrice) * 100, 2);
            <tr @onclick="(() => RedirectToCryptocurrency(walletEntry.Name))" style="cursor: pointer;" title="Klicken, um Details von @walletEntry.Name anzuzeigen">
                <td>@walletEntry.Name</td>
                <td>@walletEntry.CurrentPrice</td>
                <td>@averagePrice</td>
                <td>@priceChange %</td>
                <td>@walletEntry.Amount</td>
                <td>@(walletEntry.Amount * walletEntry.CurrentPrice)</td>
            </tr>
        }
    </tbody>
</table>

@code {
    PriceChart priceChart;
    private string transactionType = "Buy";
    private string username;

    [SupplyParameterFromForm]
    public TransactionModel transaction { get; set; } = new();

    private void selectTransactionType(string type)
    {
        transactionType = type;
    }

    private List<string> cryptocurrencies = new List<string> { "Bitcoin", "Ethereum", "Cronos" }; // Beispielhafte Liste


    public List<KeyValuePair<DateTime, double>> priceList { get; set; } = new List<KeyValuePair<DateTime, double>>();

    private List<WalletEntry> walletEntries = new List<WalletEntry>();


    private HubConnection? hubConnection;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        username = user.Identity?.Name;


        List<Transaction> allTransactionsOfUser = await transactionService.FetchAllTransactionsOfPerson(username);

        // Erstelle Empty WalletEntries nur mit dem Namen
        walletEntries = allTransactionsOfUser
            .Select(transaction => transaction.coin)
            .Distinct()
            .Select(name => new WalletEntry { Name = name })
            .ToList();


        // Berechne den durchschnittlichen Kaufpreis und die Anzahl der Cryptocurrency für jede WalletEntry
        foreach (var walletEntry in walletEntries)
        {
            var AlltransactionsOfCurrency = allTransactionsOfUser
                .Where(transaction => transaction.coin == walletEntry.Name)
                .OrderBy(t => t.TransactionDate)
                .ToList();

            walletEntry.Amount = AlltransactionsOfCurrency.Sum(transaction => transaction.TransactionType == "Buy" ? transaction.amount : -transaction.amount);

            // Setze nur den durchschnittlichen Kaufpreis, wenn der Benutzer die Cryptocurrency besitzt
            if (walletEntry.Amount > 0)
            {
                // Setze den durchschnittlichen Kaufpreis
                walletEntry.AveragePrice = HelperClasses.FinanceCalculations.CalculateAveragePrice(AlltransactionsOfCurrency);
            }
        }

        foreach (var walletEntry in walletEntries)
        {
            List<KeyValuePair<DateTime,double>> historicalPricesOfCryptoCurrency = await dataFetcherService.FetchPriceOfLast180Days(walletEntry.Name);

            historicalPricesOfCryptoCurrency = historicalPricesOfCryptoCurrency.OrderBy(h => h.Key).ToList();

            historicalPricesOfCryptoCurrency = HelperClasses.FinanceCalculations.CalculatePortfolioValueForTheLastXDays(historicalPricesOfCryptoCurrency, walletEntry.Name, allTransactionsOfUser, 180);

            // now add values to priceList
            if (priceList.Count == 0)
            {
                priceList = historicalPricesOfCryptoCurrency;
            }
            else
            {
                for (int j = 0; j < priceList.Count; j++)
                {
                    priceList[j] = new KeyValuePair<DateTime, double>(priceList[j].Key, priceList[j].Value + historicalPricesOfCryptoCurrency[j].Value);
                }
            }
        }

        List<CoinPrice> coinPrices = await dataFetcherService.FetchAllCurrentPrices();

        foreach(var walletEntry in walletEntries)
        {
            var coinPrice = coinPrices.FirstOrDefault(cp => cp.PartitionKey == walletEntry.Name);
            if (coinPrice != null)
            {
                walletEntry.CurrentPrice = coinPrice.price;
            }
        }



        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/priceshub"))
            .Build();

        hubConnection.On<string, double>("ReceivePriceUpdate", async (name, price) =>
        {
            var existingEntry = walletEntries.FirstOrDefault(entry => entry.Name == name);
            if (existingEntry != null)
            {
                existingEntry.CurrentPrice = price; // Aktualisiere den Preis des vorhandenen Eintrags
                double allValue = walletEntries.Sum(entry => entry.Amount * entry.CurrentPrice);
                await priceChart.UpdateChart(DateTime.Now, allValue);
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


    private void RedirectToCryptocurrency(string name)
    {
        Navigation.NavigateTo($"cryptocurrencies/{name}");
    }

    private async Task AddTransaction()
    {
        await transactionService.CreateTransactionAsync(username, transaction.SelectedCryptocurrency, transaction.Amount, transaction.PricePaidAll, transaction.TransactionDate, transactionType);
        var walletEntry = walletEntries.FirstOrDefault(sp => sp.Name == transaction.SelectedCryptocurrency);

        if (walletEntry != null)
        {
            if (transactionType == "Buy")
            {
                // Berechne den neuen durchschnittlichen Kaufpreis
                var totalCost = (walletEntry.Amount * walletEntry.AveragePrice) + (transaction.Amount * transaction.AveragePrice);
                walletEntry.Amount += transaction.Amount;
                walletEntry.AveragePrice = totalCost / walletEntry.Amount;
            }
            else if (transactionType == "Sell")
            {
                walletEntry.Amount -= transaction.Amount;
                if (walletEntry.Amount < 0)
                {
                    walletEntry.Amount = 0;
                }
            }
        }
        else if (transactionType == "Buy") // Neuen Eintrag nur bei Kauf hinzufügen
        {
            walletEntries.Add(new WalletEntry
                {
                    Name = transaction.SelectedCryptocurrency,
                    Amount = transaction.Amount,
                    AveragePrice = transaction.AveragePrice,
                    CurrentPrice = transaction.AveragePrice // Oder den aktuellen Preis setzen, wenn verfügbar
                });
        }

        // Aktualisieren der Ansicht
        StateHasChanged();
    }

}
