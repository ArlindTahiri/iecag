@page "/wallet"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Administrator, User")]
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation;
@implements IAsyncDisposable;
@using Microsoft.Extensions.Options;
@inject TransactionService transactionService;
@inject DataFetcherService dataFetcherService;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TelemetryClient telemetryClient
@using System.Diagnostics
@using System.Globalization
@using WebApp.Models.ViewModels;


<PageTitle>IeCAG - Wallet</PageTitle>


<div class="d-flex align-items-center">
    <div class="form-floating me-3">
        <select class="form-select" style="width: auto;" id="selectWallet" @onchange="ChangeWallet">
            <option value="" disabled selected>Select a wallet</option>
            @foreach (var wallet in wallets)
            {
                <option value="@wallet">@wallet</option>
            }
        </select>
        <label for="selectWallet">Wallet</label>
    </div>
    
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#walletModal">Add Wallet</button>
</div>

<div style="display:flex;">
    <PriceChart Name="Portfolio" @ref="priceChart" Width="70vw" Height="30vh" TimeRangeChanged="OnTimeRangeChanged" _timeRangeInDays="lastSelecteddays"/>

    <DoughnutChart Name="DoughnutChart" DataList="dataList" @ref="doughnutChart" Width="30vw" Height="30vh" />
</div>

<div class="modal fade" id="walletModal" tabindex="-1" aria-labelledby="walletModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="walletModalLabel">Add Wallet</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm OnValidSubmit="AddWallet" Model="@walletFormModel">
                <div class="modal-body">
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1">Wallet Name</span>
                        <InputText @bind-Value="walletFormModel.WalletName" type="text" class="form-control" placeholder="Portfolio" aria-label="Wallet Name" aria-describedby="basic-addon1" />
                    </div>
                </div>
                <div class="mt-3 text-center">
                    <span class="text-danger">@errorMessageWallet</span>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>



<hr />
<br />
<div class="d-flex justify-content-end justify-content-between">
    <BuySellAtMarketpriceModal TransactionAdded="UpdateCharts" coinPrices="@coinPrices" walletEntries="@walletEntries" selectedWallet="@selectedWallet" username="@username" cryptocurrencies="@cryptocurrencies" />
    <AddTransactionModal TransactionAdded="UpdateCharts" walletEntries="@walletEntries" selectedWallet="@selectedWallet" username="@username" cryptocurrencies="@cryptocurrencies" />
</div>


<div style="overflow-x: auto; overflow-y: hidden;">
    <table class="table">
        <thead>
            <tr>
                <th>Cryptocurrency</th>
                <th>Current Price</th>
                <th>Average</th>
                <th>% value Change</th>
                <th>Amount</th>
                <th>Total Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var walletEntry in walletEntries)
            {
                var averagePrice = walletEntry.AveragePrice;
                var priceChange = Math.Round(((walletEntry.CurrentPrice - averagePrice) / averagePrice) * 100, 2);
                var priceChangeColor = priceChange >= 0 ? "green" : "red";
                <tr @onclick="(() => RedirectToCryptocurrency(walletEntry.Name))" style="cursor: pointer;" title="Click, to see details of @walletEntry.Name">
                    <td style="display: flex; align-items: center;">
                        <img src="@($"/images/{walletEntry.Name}.png")"
                             onerror="this.onerror=null;this.src='/images/default.png';"
                             alt="@walletEntry.Name"
                             style="height: 1.5em; width: auto; margin-right: 0.5em;" /> @walletEntry.Name
                    </td>
                    <td>@FormatPrice(walletEntry.CurrentPrice)</td>
                    <td>@FormatPrice(averagePrice)</td>
                    <td style="color:@priceChangeColor">@priceChange %</td>
                    <td>@FormatPrice(walletEntry.Amount)</td>
                    <td>@Math.Round(walletEntry.Amount * walletEntry.CurrentPrice, 2)</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    PriceChart priceChart;
    DoughnutChart doughnutChart;

    private string username;
    private string? errorMessageWallet;
    private int lastSelecteddays = 180;

    private WalletFormModel walletFormModel = new WalletFormModel();

    private List<string> cryptocurrencies = new List<string>();

    List<Transaction> allSelectedTransactionsOfUser = new List<Transaction>();

    public List<KeyValuePair<DateTime, double>> priceList { get; set; } = new List<KeyValuePair<DateTime, double>>();

    public List<KeyValuePair<string, double>> dataList { get; set; } = new List<KeyValuePair<string, double>>();

    private List<WalletEntry> walletEntries = new List<WalletEntry>();

    private List<string> wallets = new List<string>();
    private string selectedWallet = "";

    private HubConnection? hubConnection;

    public List<CoinPrice> coinPrices = new List<CoinPrice>();

    private double FormatPrice(double price)
    {
        if (price < 1)
        {
            return Math.Round(price, 5);
        }
        else if (price < 1000)
        {
            return Math.Round(price, 3);
        }
        else
        {
            return Math.Round(price, 2);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        username = user.Identity?.Name;

        telemetryClient.Context.User.Id = username;
        telemetryClient.TrackPageView("Wallet");
        await telemetryClient.FlushAsync(CancellationToken.None);

        coinPrices = await dataFetcherService.FetchAllCurrentPrices();
        cryptocurrencies = coinPrices.Select(coin => coin.PartitionKey).ToList();


        var allTransactionsOfUser = await transactionService.FetchAllTransactionsOfPerson(username);
        wallets = allTransactionsOfUser.Select(transaction => transaction.walletName).Distinct().ToList();

        allSelectedTransactionsOfUser = allTransactionsOfUser.Where(transaction => transaction.walletName == selectedWallet).ToList();


        await HelperClasses.FinanceCalculations.CalculatePortfolioValueForTheLastXDays(dataFetcherService, walletEntries, priceList, dataList, allSelectedTransactionsOfUser, lastSelecteddays);


        await priceChart.UpdateChart(priceList);
        await doughnutChart.UpdateChart();
        StateHasChanged();


        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/priceshub"))
            .Build();

        hubConnection.On<string, double>("ReceivePriceUpdate", async (name, price) =>
        {
            var existingEntry = walletEntries.FirstOrDefault(entry => entry.Name == name);
            if (existingEntry != null)
            {
                existingEntry.CurrentPrice = price; // Update the price of the existing entry
                double allValue = walletEntries.Sum(entry => entry.Amount * entry.CurrentPrice);
                await priceChart.UpdateChart(DateTimeOffset.Now.LocalDateTime, allValue);
                await doughnutChart.UpdateChart(name, existingEntry.CurrentPrice * existingEntry.Amount);
            }
            var existingCoinEntry = coinPrices.FirstOrDefault(coin => coin.PartitionKey == name);
            if (existingCoinEntry != null)
            {
                existingCoinEntry.price = price;
            }

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


    private void RedirectToCryptocurrency(string name)
    {
        Navigation.NavigateTo($"cryptocurrencies/{name}");
    }


    private async Task UpdateCharts(string idOfModal)
    {
        var allTransactionsOfUser = await transactionService.FetchAllTransactionsOfPerson(username);
        allSelectedTransactionsOfUser = allTransactionsOfUser.Where(transaction => transaction.walletName == selectedWallet).ToList();
        await HelperClasses.FinanceCalculations.CalculatePortfolioValueForTheLastXDays(dataFetcherService, walletEntries, priceList, dataList, allSelectedTransactionsOfUser, lastSelecteddays);

        await priceChart.UpdateChart(priceList);
        await doughnutChart.UpdateChart();
        await CloseModalAsync(idOfModal);
        StateHasChanged();
    }


    private async Task AddWallet()
    {
        if (wallets.Contains(walletFormModel.WalletName))
        {
            errorMessageWallet = "Wallet name already exists";
            return;
        }
        if (string.IsNullOrWhiteSpace(walletFormModel.WalletName))
        {
            errorMessageWallet = "Wallet name is empty";
            return;
        }
        wallets.Add(walletFormModel.WalletName);
        errorMessageWallet = "";
        walletFormModel = new WalletFormModel();
        await CloseModalAsync("#walletModal");
        StateHasChanged();
    }


    private async Task OnTimeRangeChanged(int days)
    {
        lastSelecteddays = days;
        var allTransactionsOfUser = await transactionService.FetchAllTransactionsOfPerson(username);
        allSelectedTransactionsOfUser = allTransactionsOfUser.Where(transaction => transaction.walletName == selectedWallet).ToList();

        await HelperClasses.FinanceCalculations.CalculatePortfolioValueForTheLastXDays(dataFetcherService, walletEntries, priceList, dataList, allSelectedTransactionsOfUser, days);
        await priceChart.UpdateChart(priceList);
        StateHasChanged();
    }

    private async Task ChangeWallet(ChangeEventArgs e)
    {
        selectedWallet = e.Value.ToString() ;
        var allTransactionsOfUser = await transactionService.FetchAllTransactionsOfPerson(username);
        allSelectedTransactionsOfUser = allTransactionsOfUser.Where(transaction => transaction.walletName == selectedWallet).ToList();

        await HelperClasses.FinanceCalculations.CalculatePortfolioValueForTheLastXDays(dataFetcherService, walletEntries, priceList, dataList, allSelectedTransactionsOfUser, lastSelecteddays);
        await priceChart.UpdateChart(priceList);
        await doughnutChart.UpdateChart();
        StateHasChanged();
    }

    [Inject]
    IJSRuntime JSRuntime { get; set; }

    private async Task CloseModalAsync(string id)
    {
        await JSRuntime.InvokeVoidAsync("closeModal", id);
    }

    public class WalletFormModel
    {
        public string WalletName { get; set; }
    }
}
