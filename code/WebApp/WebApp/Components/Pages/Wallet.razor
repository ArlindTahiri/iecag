@page "/wallet"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Administrator,user")]
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation;
@using WebApp.Components.SubComponents;
@implements IAsyncDisposable

<h3>Wallet</h3>

<PriceChart Symbol="Portfolio" pricesList="priceList" />

<table class="table">
    <thead>
        <tr>
            <th>Cryptocurrency Name</th>
            <th>Derzeitiger Price</th>
            <th>Durchschnittkaufpreis</th>
            <th>% value Change</th>
            <th>Anzahl von Cryptocurrency</th>
            <th>Gesamter Wert</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var walletEntry in walletEntries)
        {
            var priceEntry = priceEntries.FirstOrDefault(f => f.Symbol.Equals(walletEntry.Symbol));
            if (priceEntry != null)
            {
                var currentPrice = priceEntry.Price;
                var averagePrice = walletEntry.Price;
                var priceChange = ((currentPrice - averagePrice) / averagePrice) * 100;
                <tr @onclick="(() => RedirectToCryptocurrency(walletEntry.Symbol))" style="cursor: pointer;" title="Klicken, um Details von @walletEntry.Symbol anzuzeigen">
                    <td>@walletEntry.Name @walletEntry.Symbol</td>
                    <td>@currentPrice</td>
                    <td>@averagePrice</td>
                    <td>@priceChange %</td>
                    <td>@walletEntry.Amount</td>
                    <td>@(walletEntry.Amount * currentPrice)</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    PriceChart priceChart;

    public List<KeyValuePair<DateTime, decimal>> priceList { get; set; } = new List<KeyValuePair<DateTime, decimal>>
    {
        new KeyValuePair<DateTime, decimal>(DateTime.Now.AddMinutes(-30), 48000),
        new KeyValuePair<DateTime, decimal>(DateTime.Now.AddMinutes(-25), 48500),
        new KeyValuePair<DateTime, decimal>(DateTime.Now.AddMinutes(-20), 49000),
        new KeyValuePair<DateTime, decimal>(DateTime.Now.AddMinutes(-15), 49500),
        new KeyValuePair<DateTime, decimal>(DateTime.Now.AddMinutes(-10), 50000),
        new KeyValuePair<DateTime, decimal>(DateTime.Now.AddMinutes(-5), 50500),
        new KeyValuePair<DateTime, decimal>(DateTime.Now, 51000),
    };

    private List<WalletEntry> walletEntries = new List<WalletEntry>();

    private List<PriceEntry> priceEntries = new List<PriceEntry>();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/priceshub"))
            .Build();

        hubConnection.On<string, decimal?>("ReceivePriceUpdate", async (symbol, price) =>
        {
            var existingEntry = priceEntries.FirstOrDefault(entry => entry.Symbol == symbol);
            if (existingEntry != null)
            {
                existingEntry.Price = price; // Aktualisiere den Preis des vorhandenen Eintrags
            }
            else
            {
                priceEntries.Add(new PriceEntry { Symbol = symbol, Price = price }); // Füge einen neuen Eintrag hinzu, wenn das Symbol noch nicht vorhanden ist
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


    private void RedirectToCryptocurrency(string symbol)
    {
        Navigation.NavigateTo($"cryptocurrencies/{symbol}");
    }

}
