@rendermode InteractiveServer

<!-- In deiner Blazor-Komponente -->
<div class="chart-container" style="position: relative; height:@Height; width:@Width; padding:20px; box-shadow: 0 7px 25px rgba(0,0,0,0.6); border-radius:25px;margin:10px; background: #2B3036;">
    <canvas id="@Name"></canvas>
</div>



<script>
    var PriceChart;
    createPriceChart = (priceChartID, labels, data) => {
        PriceChart = new Chart(document.getElementById(priceChartID), {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Price',
                    data: data,
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: false
                    },
                    x: {
                        type: 'time',
                        time: {
                            unit: 'minute',
                            displayFormats: {
                                minute: 'HH:mm'
                            }
                        }
                    }
                },
                
            }
        });
    };

    updatePriceChart = (labels, newData) => {
        console.log('addData function is executing.'); // Log für Ausführung der Funktion
        try {
            PriceChart.data.labels = labels;
            PriceChart.data.datasets.forEach((dataset) => {
                dataset.data = newData;
            });
            PriceChart.update();
        } catch (error) {
            console.error('An error occurred in updatePriceChart function:', error); // Fehlermeldung in der Konsole anzeigen
        }
    }

</script>

@code {
    private bool _isRendered;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isRendered = true;
            await JSRuntime.InvokeVoidAsync("createPriceChart", Name, pricesList.Select(kv => kv.Key).ToArray(), pricesList.Select(kv => kv.Value).ToArray());
        }
    }


    public async Task UpdateChart(DateTime dateTime, double price)
    {
        // Füge den neuen Datenpunkt hinzu oder überschreibe den letzten Wert
        if (pricesList.Count > 0 && dateTime.Subtract(pricesList.Last().Key).TotalSeconds < 30)
        {
            pricesList[pricesList.Count - 1] = new KeyValuePair<DateTime, double>(pricesList[pricesList.Count - 1].Key, price);
        }
        else
        {
            pricesList.Add(new KeyValuePair<DateTime, double>(dateTime, price));
        }

        // Entferne Datenpunkte, die älter als 30 Minuten sind
        DateTime oldestValidTime = dateTime.AddMinutes(-30);
        pricesList.RemoveAll(kv => kv.Key < oldestValidTime);

        // Erstelle ein neues Diagramm mit den aktualisierten Preisen
        await JSRuntime.InvokeVoidAsync("updatePriceChart", pricesList.Select(kv => kv.Key).ToArray(), pricesList.Select(kv => kv.Value).ToArray());
    }

    public async Task UpdateChart()
    {
        if (_isRendered)
        {
            await JSRuntime.InvokeVoidAsync("updatePriceChart", pricesList.Select(kv => kv.Key).ToArray(), pricesList.Select(kv => kv.Value).ToArray());
        }
        
    }





    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    private string _name;

    [Parameter]
    public string Name
    {
        get => _name;
        set
        {
            // Überprüfe, ob der Wert nicht leer ist
            if (!string.IsNullOrEmpty(value))
            {
                // Setze den Wert und füge "priceChart[]" hinzu
                _name = $"priceChart{value}";
            }
        }
    }

    [Parameter]
    public string Width { get; set; } = "80vw";

    [Parameter]
    public string Height { get; set; } = "70vh";

    [Parameter] public List<KeyValuePair<DateTime, double>> pricesList { get; set; }
}