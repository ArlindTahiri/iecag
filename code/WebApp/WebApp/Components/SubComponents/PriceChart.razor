<!-- In deiner Blazor-Komponente -->
<div>
    <canvas id="priceChart"></canvas>
</div>



<script>
    window.createPriceChart = (labels, data) => {
        var ctx = document.getElementById('priceChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Price',
                    data: data,
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: false
                    },
                    x: {
                        type: 'time',
                        time: {
                            unit: 'minute',
                            displayFormats: {
                                minute: 'HH:mm'
                            }
                        }
                    }
                },
                plugins: {
                    zoom: {
                        zoom: {
                            wheel: {
                                enabled: true,
                            },
                            pinch: {
                                enabled: true
                            },
                            mode: 'xy'
                        }
                    }
                }
            }
        });
    };
</script>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("createPriceChart", Prices.Keys.ToArray(), Prices.Values.ToArray());
        }
    }

    public async Task UpdateChart(Dictionary<DateTime, decimal> prices)
    {
        // Erstelle ein neues Diagramm mit den aktualisierten Preisen
        await JSRuntime.InvokeVoidAsync("createPriceChart", prices.Keys.ToArray(), prices.Values.ToArray());
    }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Parameter] public Dictionary<DateTime, decimal> Prices { get; set; }
}