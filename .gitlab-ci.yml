variables:
  RESOURCE_GROUP:
    description: "the resource group name"
    value: "IeCAG-INFCA"
  DEPLOY:
    description: "Deploying the infrastructure"
    value: "false"
  NUKE:
    description: "Nuke the resource group"
    value: "false"
  STORAGE_ACCOUNT:
    description: "the storage account name"
    value: "iecagstorage"
  TABLE_CURRENT_PRICE:
    description: "current price table name"
    value: "currentprices"
  TABLE_PRICE_HISTORY_7DAYS:
    description: "price history table last 7 Days"
    value: "pricehistory7days"
  TABLE_PRICE_HISTORY_30DAYS:
    description: "price history table last 30 Days"
    value: "pricehistory30days"
  TABLE_PRICE_HISTORY_180DAYS:
    description: "price history table last 180 Days"
    value: "pricehistory180days"
  TABLE_LOGS:
    description: "logs table"
    value: "logs"
  TABLE_USERS:
    description: "users table"
    value: "users"
  APPSERVICE_PLAN_NAME:
    description: "app service plan name"
    value: "iecagAppServicePlan"
  WEBAPP_NAME:
    description: "web app name"
    value: "iecagweb"
  WEBAPP_PATH:
    description: "web app path"
    value: "/app.zip"
  CONTAINER_ENV:
    description: "container environment"
    value: "iecagenv"
  AZURE_LOCATION:
    description: "azure region to deploy to"
    value: "eastus"
  WRAPPER_CONTAINER_NAME:
    description: "container name of api_wrapper"
    value: "iecagapiwrapper"
  WRAPPER_DIR:
    description: "path to api_wrapper"
    value: "./code/api_wrapper"


stages:
  - azure_setup
  - build
  - deploy

default:
  image: inf-docker.fh-rosenheim.de/inf-ca/sose2024/iecag/azure-cli
  before_script:
    - az login --service-principal --username $SP_ID --password $SP_SECRET --tenant $SP_TENANT_ID
    - az account set --subscription $SUBSCRIPTION_ID
    - set -euo pipefail

tilly_nuke:
  stage: azure_setup
  image: inf-docker.fh-rosenheim.de/inf-ca/sose2024/iecag/azure-cli
  allow_failure: true
  script:
    - if [ $NUKE == "true" ]; then az group delete --yes --name $RESOURCE_GROUP; fi || exit 0
  rules:
    - if: '$DEPLOY == "true"'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

terraform:
  stage: deploy
  image: 
    name: hashicorp/terraform:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script: 
    - apk update && apk add ca-certificates
    - mkdir -p /etc/ssl/certs
    - cp $CI_PROJECT_DIR/terraform/.thro.crt /etc/ssl/certs/custom-ca-bundle.crt
    - update-ca-certificates
  script:
    - cd terraform 
    - terraform init
    - terraform plan -var="client_id=$SP_ID" -var="client_secret=$SP_SECRET" -var="tenant_id=$SP_TENANT_ID" -var="subscription_id=$SUBSCRIPTION_ID" -var="ci_registry=$CI_REGISTRY" -var="ci_registry_user=$CI_REGISTRY_USER" -var="ci_registry_pw=$CI_REGISTRY_PASSWORD" -out=tfplan
    - terraform apply -auto-approve
  artifacts:
    paths:
      - terraform/tfplan
  needs:
    - tilly_nuke
  rules:
    - if: '$DEPLOY == "true"'
  when: manual

# azure_setup job could "fail" due to resources already existing.
# This could be checked for, but currently I am just happy to have fixed the azure-cli certificate problem.
# The allow_failure documents some allowed exit codes.
# And yes, the `|| exit 0` is terrible, but it makes the pipeline a pretty green.
azure_create_resource_group:
  stage: azure_setup
  allow_failure:
    exit_codes:
      - 0
      - 1
  needs:
    - tilly_nuke
  script:
    - az group create -n $RESOURCE_GROUP -l westeurope || exit 0
  rules:
    - if: '$DEPLOY == "true"'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

azure_create_datatable:
  stage: azure_setup
  allow_failure: true
  needs:
    - azure_create_resource_group
  script:
    - az storage account create -n $STORAGE_ACCOUNT -g $RESOURCE_GROUP -l westus --subscription $SUBSCRIPTION_ID || exit 0
    - AZURE_STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP | jq -r .[0].value) || exit 0
    - echo ${#AZURE_STORAGE_ACCOUNT_KEY}
    - az storage table create --name $TABLE_CURRENT_PRICE --account-name $STORAGE_ACCOUNT || exit 0
    - az storage table create --name $TABLE_PRICE_HISTORY_7DAYS --account-name $STORAGE_ACCOUNT || exit 0
    - az storage table create --name $TABLE_PRICE_HISTORY_30DAYS --account-name $STORAGE_ACCOUNT || exit 0
    - az storage table create --name $TABLE_PRICE_HISTORY_180DAYS --account-name $STORAGE_ACCOUNT || exit 0
    - az storage table create --name $TABLE_LOGS --account-name $STORAGE_ACCOUNT || exit 0
  rules:
    - if: '$DEPLOY == "true"'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

azure_create_appserviceplan:
  stage: azure_setup
  allow_failure: true
  needs:
    - azure_create_datatable
  script:
    - az appservice plan create --name $APPSERVICE_PLAN_NAME --resource-group $RESOURCE_GROUP --sku F1 || exit 0

azure_create_webapp:
  stage: azure_setup
  allow_failure: true
  needs:
    - azure_create_appserviceplan
  script:
    - STORAGE_CONNECTION_STRING=$(az storage account show-connection-string --name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP --query connectionString -o tsv)
    - az webapp create --resource-group $RESOURCE_GROUP --plan $APPSERVICE_PLAN_NAME --name $WEBAPP_NAME --runtime "dotnet:8" || exit 0
    - az webapp config appsettings set --resource-group $RESOURCE_GROUP --name $WEBAPP_NAME --settings ConnectionStrings__AzureStorage=$STORAGE_CONNECTION_STRING || exit 0

azure_build_webapp:
  stage: azure_setup
  image: mcr.microsoft.com/dotnet/sdk:8.0
  needs:
    - azure_create_webapp
  before_script:
    - echo "Building webapp"
  script:
    - apt update && apt install -y zip
    - cd code/WebApp/
    - dotnet publish -c Release -o out
    - cd out
    - zip -r app.zip .
  artifacts:
    when: on_success
    access: all
    expire_in: 30 days
    paths:
      - code/WebApp/out/app.zip

azure_deploy_webapp:
  stage: azure_setup
  allow_failure: true
  needs:
    - azure_build_webapp
  script:
    - az webapp deployment source config-zip --resource-group $RESOURCE_GROUP --name $WEBAPP_NAME --src code/WebApp/out/app.zip || exit 0

build_api_wrapper:
  stage: azure_setup
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - cd $WRAPPER_DIR
    - docker build -t "$CI_REGISTRY_IMAGE/api_wrapper" .
    - docker push "$CI_REGISTRY_IMAGE/api_wrapper"

azure_deploy_wrapper:
  stage: azure_setup
  allow_failure: true
  needs:
    - azure_create_datatable
    - build_api_wrapper
  script:
    - az containerapp env create --name $CONTAINER_ENV --resource-group $RESOURCE_GROUP --location $AZURE_LOCATION
    - AZURE_ACCESS_KEY="$(az storage account keys list --account-name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP | jq -r .[0].value)"
    - echo ${#AZURE_ACCESS_KEY}
    - az containerapp up -n $WRAPPER_CONTAINER_NAME --image $CI_REGISTRY_IMAGE/api_wrapper:latest --ingress external --target-port 8080 --environment $CONTAINER_ENV --registry-server "$CI_REGISTRY" --registry-password "$CI_REGISTRY_PASSWORD" --registry-username "$CI_REGISTRY_USER" --env-vars COINGECKO_TOKEN=$COINGECKO_TOKEN AZURE_ACCOUNT_NAME=$STORAGE_ACCOUNT AZURE_ACCESS_KEY=$AZURE_ACCESS_KEY || exit 0
